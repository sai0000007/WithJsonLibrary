#include <iostream>
#include <fstream>
#include <string>
#include <map>
#include <vector>
#include <jsoncpp/json/json.h> 
//if the we have json library it will work.

long long decodeValue(const std::string& value, int base) {
    return std::stoll(value, nullptr, base);
}

double lagrangeInterpolation(std::vector<std::pair<int, long long>>& points, int k) {
    double constantTerm = 0.0;

    for (int i = 0; i < k; i++) {
        double term = points[i].second;
        for (int j = 0; j < k; j++) {
            if (i != j) {
                term *= (0 - points[j].first) / (double)(points[i].first - points[j].first);
            }
        }
        constantTerm += term;
    }

    return constantTerm;
}

int main() {
    std::ifstream inputFile("input.json");
    Json::Value root;
    inputFile >> root;
    
    int n = root["keys"]["n"].asInt();
    int k = root["keys"]["k"].asInt();
    
    std::vector<std::pair<int, long long>> decodedPoints;

    for (const auto& key : root.getMemberNames()) {
        if (key != "keys") {
            int x = std::stoi(key);
            int base = root[key]["base"].asInt();
            std::string value = root[key]["value"].asString();
            long long y = decodeValue(value, base);
            decodedPoints.push_back({x, y});
        }
    }

    double secret = lagrangeInterpolation(decodedPoints, k);
    std::cout << "The secret constant (c) is: " << secret << std::endl;

    return 0;
}
